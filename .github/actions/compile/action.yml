name: "Compile"
description: "Installs Dependencies & Compiles"

inputs:
  backend:
    required: true
    description: The backend to use

  src-dir:
    required: true
    description: Sources dir

  build-dir:
    required: true
    description: Build dir

  platform:
    required: true
    description: The platform which is used to compile

  build-type:
    required: true
    description: The CMake build configuration

  cmake-args:
    required: false
    description: Additional Arguments passed to cmake

  in-container:
    required: false
    description: Whether or not to run in the current container

  arm-hack:
    required: false
    description: Sets TARGET_ARCH to hack-in support for arm 32bit. Valid inputs arm, armel, armhf

runs:
  using: "composite"
  steps:
    - name: Compile (Straight)
      if: inputs.in-container != 'true'
      shell: bash
      run: |
        if [ "${{ inputs.arm-hack }}" == "armel" ]; then
          export TARGET_ARCH="armv6+nofp"
        elif [ "${{ inputs.arm-hack }}" == "armhf" ]; then
          export TARGET_ARCH="armv6+fp"
        elif [ "${{ inputs.arm-hack  }}" == "arm" ]; then
          export TARGET_ARCH="armv5+nofp"
        fi

        cmake -B ${{ inputs.build-dir }} -S ${{ inputs.src-dir }} -Dsaucer_backend=${{ inputs.backend }} ${{ inputs.cmake-args }}
        cmake --build ${{ inputs.build-dir }} --target boson --config ${{ inputs.build-type }}
        cd ${{ inputs.build-dir }}
        ctest --build-config ${{ inputs.build-type }}

    - name: Compile (In-Container)
      if: inputs.in-container == 'true'
      uses: ./.github/actions/run-in-container
      with:
        command: |
          if [ "${{ inputs.arm-hack }}" == "armel" ]; then
            export TARGET_ARCH="armv6+nofp"
          elif [ "${{ inputs.arm-hack }}" == "armhf" ]; then
            export TARGET_ARCH="armv6+fp"
          elif [ "${{ inputs.arm-hack  }}" == "arm" ]; then
            export TARGET_ARCH="armv5+nofp"
          fi

          cmake -B ${{ inputs.build-dir }} -S ${{ inputs.src-dir }} -Dsaucer_backend=${{ inputs.backend }} ${{ inputs.cmake-args }}
          cmake --build ${{ inputs.build-dir }} --target boson --config ${{ inputs.build-type }}
          cd ${{ inputs.build-dir }}
          ctest --build-config ${{ inputs.build-type }}